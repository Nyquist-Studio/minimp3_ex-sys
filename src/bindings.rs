/* automatically generated by rust-bindgen 0.54.1 */

pub const MINIMP3_MAX_SAMPLES_PER_FRAME: usize = 2304;
pub const MP3D_SEEK_TO_BYTE: libc::c_int = 0;
pub const MP3D_SEEK_TO_SAMPLE: libc::c_int = 1;
pub const MP3D_DO_NOT_SCAN: libc::c_int = 2;
pub const MINIMP3_IO_SIZE: usize = 131072;
pub const MINIMP3_BUF_SIZE: usize = 16384;
pub const MP3D_E_PARAM: libc::c_int = -1;
pub const MP3D_E_MEMORY: libc::c_int = -2;
pub const MP3D_E_IOERROR: libc::c_int = -3;
pub const MP3D_E_USER: libc::c_int = -4;
pub const MP3D_E_DECODE: libc::c_int = -5;
pub type wchar_t = libc::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct mp3dec_frame_info_t {
    pub frame_bytes: libc::c_int,
    pub frame_offset: libc::c_int,
    pub channels: libc::c_int,
    pub hz: libc::c_int,
    pub layer: libc::c_int,
    pub bitrate_kbps: libc::c_int,
}
#[test]
fn bindgen_test_layout_mp3dec_frame_info_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_frame_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(mp3dec_frame_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_frame_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mp3dec_frame_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<mp3dec_frame_info_t>())).frame_bytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(frame_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<mp3dec_frame_info_t>())).frame_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(frame_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_frame_info_t>())).channels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_frame_info_t>())).hz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_frame_info_t>())).layer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<mp3dec_frame_info_t>())).bitrate_kbps as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_info_t),
            "::",
            stringify!(bitrate_kbps)
        )
    );
}
#[repr(C)]
pub struct mp3dec_t {
    pub mdct_overlap: [[f32; 288usize]; 2usize],
    pub qmf_state: [f32; 960usize],
    pub reserv: libc::c_int,
    pub free_format_bytes: libc::c_int,
    pub header: [libc::c_uchar; 4usize],
    pub reserv_buf: [libc::c_uchar; 511usize],
}
#[test]
fn bindgen_test_layout_mp3dec_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_t>(),
        6668usize,
        concat!("Size of: ", stringify!(mp3dec_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mp3dec_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_t>())).mdct_overlap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(mdct_overlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_t>())).qmf_state as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(qmf_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_t>())).reserv as *const _ as usize },
        6144usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(reserv)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_t>())).free_format_bytes as *const _ as usize },
        6148usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(free_format_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_t>())).header as *const _ as usize },
        6152usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_t>())).reserv_buf as *const _ as usize },
        6156usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_t),
            "::",
            stringify!(reserv_buf)
        )
    );
}
extern "C" {
    pub fn mp3dec_init(dec: *mut mp3dec_t);
}
extern "C" {
    pub fn mp3dec_decode_frame(
        dec: *mut mp3dec_t,
        mp3: *const u8,
        mp3_bytes: libc::c_int,
        pcm: *mut mp3d_sample_t,
        info: *mut mp3dec_frame_info_t,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct mp3dec_file_info_t {
    pub buffer: *mut mp3d_sample_t,
    pub samples: usize,
    pub channels: libc::c_int,
    pub hz: libc::c_int,
    pub layer: libc::c_int,
    pub avg_bitrate_kbps: libc::c_int,
}
#[test]
fn bindgen_test_layout_mp3dec_file_info_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_file_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(mp3dec_file_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_file_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_file_info_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_file_info_t>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_file_info_t>())).samples as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_file_info_t>())).channels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_file_info_t>())).hz as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(hz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_file_info_t>())).layer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<mp3dec_file_info_t>())).avg_bitrate_kbps as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_file_info_t),
            "::",
            stringify!(avg_bitrate_kbps)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct mp3dec_map_info_t {
    pub buffer: *const u8,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_mp3dec_map_info_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_map_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(mp3dec_map_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_map_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_map_info_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_map_info_t>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_map_info_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_map_info_t>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_map_info_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
pub struct mp3dec_frame_t {
    pub sample: u64,
    pub offset: u64,
}
#[test]
fn bindgen_test_layout_mp3dec_frame_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_frame_t>(),
        16usize,
        concat!("Size of: ", stringify!(mp3dec_frame_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_frame_t>())).sample as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_t),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_frame_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_frame_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct mp3dec_index_t {
    pub frames: *mut mp3dec_frame_t,
    pub num_frames: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_mp3dec_index_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_index_t>(),
        24usize,
        concat!("Size of: ", stringify!(mp3dec_index_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_index_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_index_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_index_t>())).frames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_index_t),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_index_t>())).num_frames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_index_t),
            "::",
            stringify!(num_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_index_t>())).capacity as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_index_t),
            "::",
            stringify!(capacity)
        )
    );
}
pub type MP3D_READ_CB = ::core::option::Option<
    unsafe extern "C" fn(
        buf: *mut libc::c_void,
        size: usize,
        user_data: *mut libc::c_void,
    ) -> usize,
>;
pub type MP3D_SEEK_CB = ::core::option::Option<
    unsafe extern "C" fn(position: u64, user_data: *mut libc::c_void) -> libc::c_int,
>;
#[repr(C)]
#[derive(Debug)]
pub struct mp3dec_io_t {
    pub read: MP3D_READ_CB,
    pub read_data: *mut libc::c_void,
    pub seek: MP3D_SEEK_CB,
    pub seek_data: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_mp3dec_io_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_io_t>(),
        32usize,
        concat!("Size of: ", stringify!(mp3dec_io_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_io_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_io_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_io_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_io_t>())).read_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(read_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_io_t>())).seek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_io_t>())).seek_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_io_t),
            "::",
            stringify!(seek_data)
        )
    );
}
#[repr(C)]
pub struct mp3dec_ex_t {
    pub mp3d: mp3dec_t,
    pub file: mp3dec_map_info_t,
    pub io: *mut mp3dec_io_t,
    pub index: mp3dec_index_t,
    pub offset: u64,
    pub samples: u64,
    pub detected_samples: u64,
    pub cur_sample: u64,
    pub start_offset: u64,
    pub end_offset: u64,
    pub info: mp3dec_frame_info_t,
    pub buffer: [mp3d_sample_t; 2304usize],
    pub input_consumed: usize,
    pub input_filled: usize,
    pub is_file: libc::c_int,
    pub flags: libc::c_int,
    pub vbr_tag_found: libc::c_int,
    pub indexes_built: libc::c_int,
    pub free_format_bytes: libc::c_int,
    pub buffer_samples: libc::c_int,
    pub buffer_consumed: libc::c_int,
    pub to_skip: libc::c_int,
    pub start_delay: libc::c_int,
    pub last_error: libc::c_int,
}
#[test]
fn bindgen_test_layout_mp3dec_ex_t() {
    assert_eq!(
        ::core::mem::size_of::<mp3dec_ex_t>(),
        11456usize,
        concat!("Size of: ", stringify!(mp3dec_ex_t))
    );
    assert_eq!(
        ::core::mem::align_of::<mp3dec_ex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3dec_ex_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).mp3d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(mp3d)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).file as *const _ as usize },
        6672usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).io as *const _ as usize },
        6688usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(io)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).index as *const _ as usize },
        6696usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).offset as *const _ as usize },
        6720usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).samples as *const _ as usize },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).detected_samples as *const _ as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(detected_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).cur_sample as *const _ as usize },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(cur_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).start_offset as *const _ as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(start_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).end_offset as *const _ as usize },
        6760usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(end_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).info as *const _ as usize },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).buffer as *const _ as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).input_consumed as *const _ as usize },
        11400usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(input_consumed)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).input_filled as *const _ as usize },
        11408usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(input_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).is_file as *const _ as usize },
        11416usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(is_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).flags as *const _ as usize },
        11420usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).vbr_tag_found as *const _ as usize },
        11424usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(vbr_tag_found)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).indexes_built as *const _ as usize },
        11428usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(indexes_built)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).free_format_bytes as *const _ as usize },
        11432usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(free_format_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).buffer_samples as *const _ as usize },
        11436usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(buffer_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).buffer_consumed as *const _ as usize },
        11440usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(buffer_consumed)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).to_skip as *const _ as usize },
        11444usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(to_skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).start_delay as *const _ as usize },
        11448usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(start_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mp3dec_ex_t>())).last_error as *const _ as usize },
        11452usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3dec_ex_t),
            "::",
            stringify!(last_error)
        )
    );
}
pub type MP3D_ITERATE_CB = ::core::option::Option<
    unsafe extern "C" fn(
        user_data: *mut libc::c_void,
        frame: *const u8,
        frame_size: libc::c_int,
        free_format_bytes: libc::c_int,
        buf_size: usize,
        offset: u64,
        info: *mut mp3dec_frame_info_t,
    ) -> libc::c_int,
>;
pub type MP3D_PROGRESS_CB = ::core::option::Option<
    unsafe extern "C" fn(
        user_data: *mut libc::c_void,
        file_size: usize,
        offset: u64,
        info: *mut mp3dec_frame_info_t,
    ) -> libc::c_int,
>;
extern "C" {
    pub fn mp3dec_detect_buf(buf: *const u8, buf_size: usize) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_detect_cb(io: *mut mp3dec_io_t, buf: *mut u8, buf_size: usize) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_load_buf(
        dec: *mut mp3dec_t,
        buf: *const u8,
        buf_size: usize,
        info: *mut mp3dec_file_info_t,
        progress_cb: MP3D_PROGRESS_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_load_cb(
        dec: *mut mp3dec_t,
        io: *mut mp3dec_io_t,
        buf: *mut u8,
        buf_size: usize,
        info: *mut mp3dec_file_info_t,
        progress_cb: MP3D_PROGRESS_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_iterate_buf(
        buf: *const u8,
        buf_size: usize,
        callback: MP3D_ITERATE_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_iterate_cb(
        io: *mut mp3dec_io_t,
        buf: *mut u8,
        buf_size: usize,
        callback: MP3D_ITERATE_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_ex_open_buf(
        dec: *mut mp3dec_ex_t,
        buf: *const u8,
        buf_size: usize,
        flags: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_ex_open_cb(
        dec: *mut mp3dec_ex_t,
        io: *mut mp3dec_io_t,
        flags: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_ex_close(dec: *mut mp3dec_ex_t);
}
extern "C" {
    pub fn mp3dec_ex_seek(dec: *mut mp3dec_ex_t, position: u64) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_ex_read_frame(
        dec: *mut mp3dec_ex_t,
        buf: *mut *mut mp3d_sample_t,
        max_samples: usize,
    ) -> usize;
}
extern "C" {
    pub fn mp3dec_ex_read(dec: *mut mp3dec_ex_t, buf: *mut mp3d_sample_t, samples: usize) -> usize;
}
extern "C" {
    pub fn mp3dec_detect(file_name: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_load(
        dec: *mut mp3dec_t,
        file_name: *const libc::c_char,
        info: *mut mp3dec_file_info_t,
        progress_cb: MP3D_PROGRESS_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_iterate(
        file_name: *const libc::c_char,
        callback: MP3D_ITERATE_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_ex_open(
        dec: *mut mp3dec_ex_t,
        file_name: *const libc::c_char,
        flags: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_detect_w(file_name: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_load_w(
        dec: *mut mp3dec_t,
        file_name: *const wchar_t,
        info: *mut mp3dec_file_info_t,
        progress_cb: MP3D_PROGRESS_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_iterate_w(
        file_name: *const wchar_t,
        callback: MP3D_ITERATE_CB,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mp3dec_ex_open_w(
        dec: *mut mp3dec_ex_t,
        file_name: *const wchar_t,
        flags: libc::c_int,
    ) -> libc::c_int;
}
